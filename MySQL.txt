Mysql实战-索引最左侧匹配原则分析及实战
前面我们讲解了索引的存储结构，B+Tree的索引结构，以及索引最左侧匹配原则，Explain的用法，今天我们来实战一下 最左侧匹配原则

1.联合索引最左侧匹配原则
联合索引有一个最左侧匹配原则
最左匹配原则指的是，当使用联合索引进行查询时，MySQL会优先使用最左边的列进行匹配，然后再依次向右匹配。

假设我们有一个表，包含三个列：A、B、C
创建联合索引(A,B,C) 等同于创建了索引 A， 索引 (A,B), 索引 (A,B,C)

我们使用(A,B,C)这个联合索引进行查询时，MySQL会先根据列A进行匹配
再根据列B进行匹配，最后再根据列C进行匹配。
如果我们只查询了(A,B)这两个列，而没有查询列C，那么MySQL只会使用(A,B)这个前缀来进行索引匹配，而不会使用到列C
如果我们要查询 了(B,C)这两个列，而没有查询列A，那么MySQL索引就会失效，导致找不到索引，因为最左侧匹配原理
所以 我们应该尽量把最常用的列放在联合索引的最左边，这样可以提高查询效率

索引的原理：就是把无序的数据变成有序的查询
1.  把创建了索引的列的内容进行排序。
2.  对排序结果生成倒排表。
3.  在倒排表内容上拼上数据地址链。
4.  在查询的时候，先拿到倒排表内容，再取出数据地址链，从而拿到具体数据

优势：
唯一索引可以保证数据库表中每一行数据的唯一性，索引可以加快数据查询速度，减少查询时间
劣势：
创建索引和维护索引要耗费时间，索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，给表中的数据进行增、删、改的时候，索引也要动态的维护。

MySQL索引的数据结构 Hash B+ InnoDB默认 B+
单条记录查询常见多 使用Hash 除此之外B+
B+树是一个平衡的多叉树 从根节点到每个叶子节点的高度差值不超过1，而且同层级的节点间有指针相互链接。
在B+树上的常规检索，从根节点到叶子节点的搜索效率基本相当，不会出现大幅波动，而且基于索引的顺序扫描时，也可以利用双向指针快速左右移动，效率非常高。
Hash索引 把键值换算成新的哈希值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快

等值查询 Hash有绝对优势 前提是键值都是唯一的 如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，直到找到相应的数据
如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索
哈希索引也没办法利用索引完成排序，以及like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）
哈希索引也不支持多列联合索引的最左匹配规则
B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，在有大量重复键值情况下，哈希索引的效率也是极低的，因为存在哈希碰撞问题。

索引设计原则 查询块 占用空间小
1.  适合索引的列是出现在where子句中的列，或者连接子句中指定的列。
2.  基数较小的表，索引效果较差，没有必要在此列建立索引
3.  使用短索引，如果对长字符串列进行索引，应该指定一个前缀长度，这样能够节省大量索引空间，如果搜索词超过索引前缀长度，则使用索引排除不匹配的行，然后检查其余行是否可能匹配
4.  不要过度索引。索引需要额外的磁盘空间，并降低写操作的性能。在修改表内容的时候，索引会进行更新甚至重构，索引列越多，这个时间就会越长。所以只保持需要的索引有利于查询即可。
5.  定义有外键的数据列一定要建立索引。
6.  更新频繁字段不适合创建索引。
7.  若是不能有效区分数据的列不适合做索引列(如性别，男女未知，最多也就三种，区分度实在太低)
8.  对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。
9.  对于定义为text、image和bit的数据类型的列不要建立索引。

# MySQL中B+树和B树的区别
1、**非叶子节点数据不同**：
-   B+树的非叶子节点的数据都在叶子节点中出现过，也就是叶子节点中的数据都在非叶子节点冗余一份。B树中非叶子节点中元素不会冗余。
-   B+树非叶子节点只存放指针，不存放数据，B树所有节点（叶子节点）都存放数据。
2、**叶子节点数据不同**：B+树叶子节点存放数据，B树所有节点（非叶子节）点存放数据。数据遍布整个树结构。
3、**时间复杂度不同**：由于B+树的数据都存在叶子节点，因此B+树的时间复杂度固定为o(log n)，而B树的数据分布在每个节点中，因此时间复杂度不固定，最好为o(1).
4、**叶子节点连接不同**：B+树的叶子节点通过有序的双向链表相连，B树叶子节点不相连。
5、**区间查询效率不同**：因为第4点的原因，所以B+树去范围查询效率更快，而B树范围查询比较慢。
因此，存在大量范围查询的场景，适合使用B+树
而对大量单个key查询的场景，可以考虑B树

